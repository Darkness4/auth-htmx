// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: queries.sql

package database

import (
	"context"
)

const createCounter = `-- name: CreateCounter :exec
INSERT INTO counters (user_id, count) VALUES (?, 1)
`

func (q *Queries) CreateCounter(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, createCounter, userID)
	return err
}

const createCredential = `-- name: CreateCredential :exec
INSERT INTO credentials (id, public_key, attestation_type, transport, flags, authenticator, user_id) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateCredentialParams struct {
	ID              []byte
	PublicKey       []byte
	AttestationType string
	Transport       []byte
	Flags           []byte
	Authenticator   []byte
	UserID          []byte
}

func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) error {
	_, err := q.db.ExecContext(ctx, createCredential,
		arg.ID,
		arg.PublicKey,
		arg.AttestationType,
		arg.Transport,
		arg.Flags,
		arg.Authenticator,
		arg.UserID,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, display_name) VALUES (?, ?, ?) RETURNING id, name, display_name
`

type CreateUserParams struct {
	ID          []byte
	Name        string
	DisplayName string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Name, arg.DisplayName)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.DisplayName)
	return i, err
}

const getCounter = `-- name: GetCounter :one
SELECT user_id, count FROM counters WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetCounter(ctx context.Context, userID string) (Counter, error) {
	row := q.db.QueryRowContext(ctx, getCounter, userID)
	var i Counter
	err := row.Scan(&i.UserID, &i.Count)
	return i, err
}

const getCredentialsByUser = `-- name: GetCredentialsByUser :many
SELECT id, public_key, attestation_type, transport, flags, authenticator, user_id FROM credentials WHERE user_id = ?
`

func (q *Queries) GetCredentialsByUser(ctx context.Context, userID []byte) ([]Credential, error) {
	rows, err := q.db.QueryContext(ctx, getCredentialsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Credential
	for rows.Next() {
		var i Credential
		if err := rows.Scan(
			&i.ID,
			&i.PublicKey,
			&i.AttestationType,
			&i.Transport,
			&i.Flags,
			&i.Authenticator,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByName = `-- name: GetUserByName :one

SELECT id, name, display_name FROM users WHERE name = ? LIMIT 1
`

// Self-Hosted users
func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.DisplayName)
	return i, err
}

const incrementCounter = `-- name: IncrementCounter :one
UPDATE counters SET count = count + 1 WHERE user_id = ? RETURNING count
`

func (q *Queries) IncrementCounter(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, incrementCounter, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateCredential = `-- name: UpdateCredential :exec
UPDATE credentials
SET public_key = ?,
attestation_type = ?,
transport = ?,
flags = ?,
authenticator = ?
WHERE id = ?6
`

type UpdateCredentialParams struct {
	PublicKey       []byte
	AttestationType string
	Transport       []byte
	Flags           []byte
	Authenticator   []byte
	ByID            []byte
}

func (q *Queries) UpdateCredential(ctx context.Context, arg UpdateCredentialParams) error {
	_, err := q.db.ExecContext(ctx, updateCredential,
		arg.PublicKey,
		arg.AttestationType,
		arg.Transport,
		arg.Flags,
		arg.Authenticator,
		arg.ByID,
	)
	return err
}
